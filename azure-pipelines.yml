trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # these two come from your publish-profile and must live in a secret variable group
- group: zipdeploy-secrets  
  # path to the ZIP we’ll create
- name: zipPath
  value: '$(Build.ArtifactStagingDirectory)/app.zip'
  # your full Kudu/SCM URL from the publish profile, without “https://” or “/api/zipdeploy”
- name: scmHost
  value: 'rymec-demo-app-d6h5gmc9crhnc5g7.scm.centralus-01.azurewebsites.net'

steps:
# 1) Build the Spring Boot executable JAR
- task: Gradle@2
  displayName: '🔨 Build Spring Boot fat-jar'
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'clean bootJar'        # bootJar generates your 50 MB app.jar
    options: '--no-daemon'

# 2) Copy the one and only fat-jar into staging
- task: CopyFiles@2
  displayName: '📦 Copy app.jar → staging'
  inputs:
    contents: '**/build/libs/app.jar'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

# 3) Zip it (must contain app.jar at the root of the ZIP)
- task: ArchiveFiles@2
  displayName: '📁 Archive app.jar → app.zip'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/app.jar'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(zipPath)'
    replaceExistingArchive: true

# 4) Curl the ZIP up to the *exact* Kudu endpoint from your publish profile
- task: Bash@3
  displayName: '🚀 Deploy via ZipDeploy'
  inputs:
    targetType: 'inline'
    script: |
      echo "Deploying to https://$(scmHost)/api/zipdeploy"
      # build a Base64 “user:pass” string so the leading ‘$’ is preserved
      AUTH=$(printf '%s:%s' "$DEPLOY_USER" "$DEPLOY_PASSWORD" | base64)
      curl -v -X POST \
        -H "Authorization: Basic $AUTH" \
        --data-binary "@$(zipPath)" \
        "https://$(scmHost)/api/zipdeploy"
